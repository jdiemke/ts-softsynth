{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ts-softsynth/webpack/bootstrap","webpack://ts-softsynth/webpack/runtime/global","webpack://ts-softsynth/webpack/runtime/publicPath","webpack://ts-softsynth/./src/synthesizer/instrument.ts","webpack://ts-softsynth/./src/synthesizer/synthesizer.ts","webpack://ts-softsynth/./src/index.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export class Instrument {\n    public on: boolean;\n    public currentPhase: number;\n    public envelope: number;\n    public phaseIncrement: number;\n}\n","import { Instrument } from \"./instrument\";\n\nexport class Synthesizer {\n\n    private sampleRate: number;\n    private currentPhase: number;\n    private phaseIncrement: number;\n    private currentSample: number;\n    private stepSize: number;\n    private currentStep: number;\n    private patternPosition: number;\n\n    private songPos: number = 0;\n    private songTime: number = 0;\n    private temp: Float32Array = new Float32Array(4096);\n    private tempo: number;\n    private status: boolean = false;\n    private noise: number = 0;\n    private instruments: Array<Instrument> = [new Instrument(), new Instrument(), new Instrument()];\n    private pattern: Array<Array<number>> = [\n        [255, 255, 255, 255, 1, 255, 255, 255, 255, 255, 255, 255, 1, 255, 255, 255, 1, 255, 1, 255, 1, 1, 255, 1, 1, 255, 1, 1, 1, 255, 1, 255],\n        [32, 255, 32, 30, 255, 30, 255, 30, 255, 255, 32, 30, 255, 30, 44, 20, 32, 255, 32, 30, 255, 30, 255, 30, 255, 255, 32, 30, 255, 30, 44, 20],\n        [32 * 2, 255, 32 * 2, 30, 255, 30, 255, 30, 255, 255, 32, 30, 255, 30, 44, 20, 32 * 2, 255, 32 * 2, 30, 64, 52, 76, 30, 255, 255, 32, 30, 255, 30, 44, 20],\n    ];\n\n    public getPattern(): Array<Array<number>> {\n        return this.pattern;\n    }\n\n    public getSongPos(): number {\n        return this.songPos;\n    }\n\n    private envelope: number;\n\n    constructor(sampleRate: number) {\n        this.sampleRate = sampleRate;\n        this.currentPhase = 0.0;\n        this.tempo = Math.floor(sampleRate / 8);\n    }\n\n    /**\n     * TODO:\n     * * create different oscillator classes\n     * * create different ADSR envelopes\n     */\n    public getSamples(buffer: Float32Array): void {\n        for (let i: number = 0; i < buffer.length; i++) {\n\n\n            if ((this.songTime % this.tempo) === 0) {\n                for (let inst = 0; inst < 3; inst++) {\n                    this.instruments[inst].on = false;\n                    let note = this.pattern[inst][(this.songPos % this.pattern[inst].length)];\n                    if (note !== 255) {\n                        this.instruments[inst].on = true;\n                        this.instruments[inst].currentPhase = 0;\n                        this.instruments[inst].envelope = 0;\n                        this.instruments[inst].phaseIncrement = 2 * Math.PI * this.pitchToFrequency(note) / this.sampleRate;\n                    }\n                }\n                this.songPos++;\n            }\n\n            let wave: number = 0.0;\n\n            /**\n             * TODO:\n             * - SQUARE WAVE\n             * - TRIANGLE\n             * - SAWTOOTH\n             * - NOISE\n             * - SINE\n             */\n            for (let inst = 0; inst < 3; inst++) {\n                if (this.instruments[inst].on) {\n                    this.instruments[inst].currentPhase += this.instruments[inst].phaseIncrement;\n                    if ((this.songTime % this.tempo) < this.tempo * 0.05) this.instruments[inst].envelope += 1 / (this.tempo * 0.05);\n                    if ((this.songTime % this.tempo) >= this.tempo * 0.05) this.instruments[inst].envelope -= 1 / (this.tempo * 0.95);\n                    this.instruments[inst].envelope = Math.max(0.0, Math.min(this.instruments[inst].envelope, 1.0));\n\n                    //wave += Math.sin(this.currentPhase) * this.envelope; // Math.random() * 2 - 1;\n                    if (inst === 0)\n                        wave += (Math.random() * 2 - 1) * this.instruments[inst].envelope * 0.7;\n                    else if (inst === 1)\n                        wave += (Math.sin(this.instruments[inst].currentPhase) > 0 ? 1 : -1) * this.instruments[inst].envelope * 0.5; // Math.random() * 2 - 1;\n                    else if (inst === 2)\n                        wave += Math.sin(this.instruments[inst].currentPhase) * this.instruments[inst].envelope;\n                }\n            }\n\n            buffer[i] =this.clipSignal(wave*0.4);//this.clipSignal(this.shapingFunction(this.lowPassFrequency(wave * 0.8), this.songTime));\n            this.songTime++;\n        }\n\n    }\n\n    private lastOut: number = 0;\n\n    /**\n     * https://stackoverflow.com/questions/13882038/implementing-simple-high-and-low-pass-filters-in-c\n     * https://www.quora.com/Whats-the-C-coding-for-a-low-pass-filter\n     */\n    public lowPassFrequency(input: number): number {\n        let CUTOFF = 400;\n        let SAMPLE_RATE = this.sampleRate;\n        let RC = 1.0 / (CUTOFF * 2 * 3.14);\n        let dt = 1.0 / SAMPLE_RATE;\n        let alpha = dt / (RC + dt);\n\n        this.lastOut += (alpha * (input - this.lastOut));\n        return this.lastOut;\n    }\n\n    // Waveshaper implementation\n    private shapingFunction(input: number, songTime: number): number {\n        return Math.sin(input * input * input * 8.0 + songTime * 0.015);\n    }\n\n    private clipSignal(wave: number): number {\n        const clip: number = 1.0;\n        return Math.min(Math.max(wave, -clip), clip);\n    }\n\n    /**\n     * MIDI pitch number to frequency conversion\n     *\n     * @description\n     * The note A4 has a frequency of 440 Hz and is represented by the\n     * midi number 69\n     *\n     * @see\n     * http://newt.phys.unsw.edu.au/jw/notes.html\n     *\n     * @param midiPitch\n     */\n    private pitchToFrequency(midiPitch: number): number {\n        const exponent: number = (midiPitch - 69.0) / 12.0;\n        return Math.pow(2, exponent) * 440.0;\n    }\n\n}\n","import { Synthesizer } from './synthesizer/synthesizer';\nimport font from './assets/Green-Font.bmp';\n\nclass Application {\n\n    private static readonly BUFFER_SIZE: number = 4096;\n    private analyser: AnalyserNode;\n    private lastTime: number = 0;\n    private dataArray: Uint8Array;\n    private image: HTMLImageElement;\n    private image2: HTMLImageElement;\n    private activeChannel: number = 0;\n    private activeRow: number = 0;\n    private synthesizer: Synthesizer;\n    private currentOctave: number = 5;\n    public main(): void {\n        const canvas: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById('synth');\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n\n        const audioContext: AudioContext = new AudioContext(/*{sampleRate: 8000}*/);\n\n        let scriptProcessorNode: ScriptProcessorNode;\n        scriptProcessorNode = audioContext.createScriptProcessor(Application.BUFFER_SIZE, 1, 1);\n\n        this.synthesizer = new Synthesizer(audioContext.sampleRate);\n\n        scriptProcessorNode.onaudioprocess = (audioProcessingEvent: AudioProcessingEvent): void => {\n            const outputBuffer: Float32Array = audioProcessingEvent.outputBuffer.getChannelData(0);\n            this.synthesizer.getSamples(outputBuffer);\n        };\n\n\n        audioContext.audioWorklet.addModule('synthesizer.audio-worklet.js').then(() => {\n            const whiteNoiseNode = new AudioWorkletNode(\n                audioContext,\n                \"synthesizer-processor\"\n              );\n              whiteNoiseNode.connect(audioContext.destination);\n              \n      \n              this.analyser = audioContext.createAnalyser();\n      \n              this.analyser.fftSize = 2048;\n              const bufferLength: number = this.analyser.frequencyBinCount;\n              this.dataArray = new Uint8Array(bufferLength);\n      \n              whiteNoiseNode.connect(this.analyser);\n              this.analyser.connect(audioContext.destination);\n        });\n      \n\n        window.onkeydown = (e: KeyboardEvent): any => {\n            const code: number = e.keyCode ? e.keyCode : e.which;\n            /* LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40,\n             */\n            console.log('key: ' + code);\n\n            if (code === 39) { //up key\n                console.log('right');\n                this.activeChannel = (this.activeChannel + 1) % 4;\n            } else if (code === 37) { //down key\n                console.log('left');\n                this.activeChannel = (this.activeChannel + 4 - 1) % 4;\n            } else if (code === 38) { //up key\n                console.log('up');\n                this.activeRow = (this.activeRow + 32 - 1) % 32;\n            } \n            \n            else if (code === 107) { //+\n                console.log('left');\n                this.currentOctave = (this.currentOctave  + 1) % 12;\n            } else if (code === 109) { //-\n                console.log('up');\n                this.currentOctave = (this.currentOctave + 12 - 1) % 12;\n            } \n            \n            \n            else if (code === 40) { //down key\n                console.log('down');\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 46) {\n                console.log('del');\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                console.log(pattern[this.activeChannel][this.activeRow]);\n                pattern[this.activeChannel][this.activeRow] = 255;\n                console.log(pattern[this.activeChannel][this.activeRow]);\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 89) { // C4\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 0 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 83) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 1 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 88) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 2 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 68) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 3 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 67) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 4 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 86) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 5 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 71) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 6 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 66) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 7 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 72) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 8 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 78) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 9 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 74) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 10 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            } else if (code === 77) { // Y\n                const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n                pattern[this.activeChannel][this.activeRow] = 11 + this.currentOctave * 12;\n                this.activeRow = (this.activeRow + 1) % 32;\n            }\n        };\n\n        this.image = new Image();\n        this.image.onload = (ev: Event): any => {\n            this.image2 = new Image();\n            this.image2.onload = (ev2: Event): any => {\n                requestAnimationFrame(() => this.draw(context));\n            };\n            \n            this.image2.src =font;\n        };\n        this.image.src = require('./assets/Knob.bmp');\n    }\n\n    public draw(context: CanvasRenderingContext2D): void {\n        context.fillStyle = '#333333';\n        context.fillRect(0, 0, 640, 480);\n        this.analyser && this.drawOscilloscop(context, 200, 50);\n        const pos: number = Math.floor(Date.now() * 0.02) % 63;\n        context.drawImage(this.image, pos * 32, 0, 32, 32, 240, 0, 32, 32);\n        context.fillStyle = '#b3c13f';\n        context.fillRect(10, 70, 8 * 46, 8 * 32);\n        this.drawPattern(context, 10, 70);\n        this.drawActivePos(context, this.activeChannel, this.activeRow);\n        requestAnimationFrame(() => this.draw(context));\n    }\n\n    public drawActivePos(context: CanvasRenderingContext2D, channel: number, pos: number): void {\n        // not correct since only the rendered songpos not the currently played one :)\n        const songPos: number = this.synthesizer.getSongPos() % 32;\n\n\n        context.strokeStyle = '#00ff00';\n        context.lineWidth = 2.0;\n        context.strokeRect(10. - 2 + (12 * 8 * channel), 70. - 2 + (songPos * 8), (10 * 8 + 4) * 3, 8 + 3);\n\n        context.strokeStyle = '#ff1100';\n        context.lineWidth = 2.0;\n        context.strokeRect(10. - 2 + (12 * 8 * channel), 70. - 2 + (pos * 8), 10 * 8 + 4, 8 + 3);\n\n        // TODO: use inverted FONT!\n    }\n\n    public drawText(context: CanvasRenderingContext2D, x: number, y: number, text: string): void {\n        for (let i = 0; i < text.length; i++) {\n            this.drawChar(context, x + i * 8, y, text.charCodeAt(i));\n        }\n    }\n\n    private static readonly noteRepresentations: Array<string> = [\"C-\", \"C#\", \"D-\", \"D#\", \"E-\", \"F-\", \"F#\", \"G-\",\n        \"G#\", \"A-\", \"A#\", \"B-\"];\n\n    public drawPattern(context: CanvasRenderingContext2D, x: number, y: number): void {\n        const pattern: Array<Array<number>> = this.synthesizer.getPattern();\n        for (let k = 0; k < 3; k++) {\n            for (let i = 0; i < 32; i++) {\n                if (pattern[k][i] === 255)\n                    this.drawText(context, x + k * 12 * 8, y + i * 8, '--- -- --');\n                else {\n                    let note: number = pattern[k][i];\n                    this.drawText(context, x + k * 12 * 8, y + i * 8, Application.noteRepresentations[note % 12] + (Math.floor(note / 12))+' -- --');\n                }\n            }\n        }\n    }\n\n    public drawChar(context: CanvasRenderingContext2D, x: number, y: number, char: number): void {\n        const index: number = char - ' '.charCodeAt(0);\n        const xoff: number = index % 16;\n        const yoff: number = Math.floor(index / 16);\n        context.drawImage(this.image2, xoff * 8, yoff * 8, 8, 8, x, y, 8, 8);\n    }\n\n    public drawOscilloscop(context: CanvasRenderingContext2D, width: number, height: number): void {\n        context.save();\n        context.translate(10.5, 10.5);\n\n        context.fillStyle = '#002200';\n        context.fillRect(0, 0, width, height);\n\n\n\n        if ((Date.now() - this.lastTime) > 80) {\n            this.analyser && this.analyser.getByteTimeDomainData(this.dataArray);\n            this.lastTime = Date.now();\n        }\n\n        context.lineWidth = 3.0;\n        context.strokeStyle = 'rgb(0.3, 1, 0.3)';\n\n        context.beginPath();\n        context.strokeStyle = '#BBFF00';\n        const STEPS: number = 90;\n        const clearance: number = 4;\n\n        for (let i: number = 0; i < STEPS; i++) {\n            const x: number = width * i / (STEPS);\n\n            const pos: number = Math.floor(this.dataArray.length / STEPS * i);\n            const y: number = clearance + this.dataArray[pos] / 256 * (height - 2 * clearance);\n\n            if (i === 0) {\n                context.moveTo(x, y);\n            } else {\n                context.lineTo(x, y);\n            }\n        }\n        context.stroke();\n\n        context.strokeStyle = '#001100';\n        context.lineWidth = 1.0;\n        context.strokeRect(0, 0, width, height);\n\n        context.restore();\n    }\n\n}\nconst button = document.getElementById('button');\nbutton.onclick = () => new Application().main();\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","Instrument","Synthesizer","getPattern","pattern","getSongPos","songPos","constructor","sampleRate","songTime","temp","Float32Array","status","noise","instruments","lastOut","currentPhase","tempo","Math","floor","getSamples","buffer","i","inst","on","note","envelope","phaseIncrement","PI","pitchToFrequency","wave","max","min","random","sin","clipSignal","lowPassFrequency","input","dt","alpha","shapingFunction","midiPitch","exponent","pow","Application","lastTime","activeChannel","activeRow","currentOctave","main","context","getElementById","getContext","audioContext","AudioContext","scriptProcessorNode","createScriptProcessor","BUFFER_SIZE","synthesizer","onaudioprocess","audioProcessingEvent","outputBuffer","getChannelData","audioWorklet","addModule","then","whiteNoiseNode","AudioWorkletNode","connect","destination","analyser","createAnalyser","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","onkeydown","code","keyCode","which","console","log","image","Image","onload","ev","image2","ev2","requestAnimationFrame","draw","fillStyle","fillRect","drawOscilloscop","pos","Date","now","drawImage","drawPattern","drawActivePos","channel","strokeStyle","lineWidth","strokeRect","drawText","x","y","text","drawChar","charCodeAt","k","noteRepresentations","char","index","xoff","yoff","width","height","save","translate","getByteTimeDomainData","beginPath","moveTo","lineTo","stroke","restore","onclick"],"sourceRoot":""}