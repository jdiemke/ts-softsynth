(()=>{"use strict";class t{}class s{getPattern(){return this.pattern}getSongPos(){return this.songPos}constructor(s){this.songPos=0,this.songTime=0,this.temp=new Float32Array(4096),this.status=!1,this.noise=0,this.instruments=[new t,new t,new t],this.pattern=[[255,255,255,255,1,255,255,255,255,255,255,255,1,255,255,255,1,255,1,255,1,1,255,1,1,255,1,1,1,255,1,255],[32,255,32,30,255,30,255,30,255,255,32,30,255,30,44,20,32,255,32,30,255,30,255,30,255,255,32,30,255,30,44,20],[64,255,64,30,255,30,255,30,255,255,32,30,255,30,44,20,64,255,64,30,64,52,76,30,255,255,32,30,255,30,44,20]],this.lastOut=0,this.sampleRate=s,this.currentPhase=0,this.tempo=Math.floor(s/8)}getSamples(t){for(let s=0;s<t.length;s++){if(this.songTime%this.tempo==0){for(let t=0;t<3;t++){this.instruments[t].on=!1;let s=this.pattern[t][this.songPos%this.pattern[t].length];255!==s&&(this.instruments[t].on=!0,this.instruments[t].currentPhase=0,this.instruments[t].envelope=0,this.instruments[t].phaseIncrement=2*Math.PI*this.pitchToFrequency(s)/this.sampleRate)}this.songPos++}let e=0;for(let t=0;t<3;t++)this.instruments[t].on&&(this.instruments[t].currentPhase+=this.instruments[t].phaseIncrement,this.songTime%this.tempo<.05*this.tempo&&(this.instruments[t].envelope+=1/(.05*this.tempo)),this.songTime%this.tempo>=.05*this.tempo&&(this.instruments[t].envelope-=1/(.95*this.tempo)),this.instruments[t].envelope=Math.max(0,Math.min(this.instruments[t].envelope,1)),0===t?e+=(2*Math.random()-1)*this.instruments[t].envelope*.7:1===t?e+=(Math.sin(this.instruments[t].currentPhase)>0?1:-1)*this.instruments[t].envelope*.5:2===t&&(e+=Math.sin(this.instruments[t].currentPhase)*this.instruments[t].envelope));t[s]=this.clipSignal(.4*e),this.songTime++}}lowPassFrequency(t){let s=1/this.sampleRate,e=s/(.0003980891719745223+s);return this.lastOut+=e*(t-this.lastOut),this.lastOut}shapingFunction(t,s){return Math.sin(t*t*t*8+.015*s)}clipSignal(t){return Math.min(Math.max(t,-1),1)}pitchToFrequency(t){const s=(t-69)/12;return 440*Math.pow(2,s)}}class e extends AudioWorkletProcessor{constructor(){super(),this.synthesizer=new s(sampleRate)}process(t,s,e){return s[0].forEach((t=>{this.synthesizer.getSamples(t)})),!0}}registerProcessor("synthesizer-processor",e)})();